#!/bin/bash
set -e

board_dim=4
board_dim_minus_two=$((board_dim-2))
total_tiles=$((board_dim * board_dim))
ENABLE_LOGGING=false

log() {
	if $ENABLE_LOGGING; then
		echo "# $@"
	fi
}

trace() {
	local name=$1
	shift
	local stage=$1
	shift
	log TRACE :: $name :: $stage $@
}

TODO() {
	log TODO: $@
	exit 1
}

game_loop() {
	while $game_in_progress; do
		wait_for_input
		process_input
		if $input_was_valid; then
			add_new_square
			render_board
			check_for_game_over
			input_was_valid=false
		fi
	done
}

new_game() {
	trace new_game ENTER
	score=0
	clear_field_of_play
	add_new_square
	add_new_square
	game_in_progress=true
	render_board
	game_loop
	trace new_game EXIT
}

clear_field_of_play() {
	trace clear_field_of_play ENTER
	for ((i=0; i<$total_tiles; ++i)); do
		board[$i]=0
	done
	trace clear_field_of_play EXIT
}

add_new_square() {
	trace add_new_square ENTER
	local need_to_add=true
	local new_val=$((RANDOM % 10))
	if [[ $new_val == 0 ]]; then
		new_val=2
	else
		new_val=1
	fi
	while $need_to_add; do
		log "add_new loop..." ;
		local cell_index=$((RANDOM % total_tiles))
		local current_content=${board[$cell_index]}
		log "current content=$current_content"
		if [[ $current_content == 0 ]]; then
			log "adding square at ($x,$y)"
			local need_to_add=false
			board[$cell_index]=$new_val
		fi
	done
	trace add_new_square EXIT
}

check_for_game_over() {
	# TODO game over check is a bit more complex than "no new squares"
	return
	for ((i=0; i<$total_tiles; ++i)); do
		if [[ ${board[$i]} == 0 ]]; then
			return
		fi
	done
	echo "There are no empty squares."
	echo "Game over."
	exit 1
}

wait_for_input() {
	read -s -n 1 in_key
}

get_index() {
	local x=$1
	local y=$2
	echo $((y * board_dim + x))
}

get_content() {
	local x=$1
	local y=$2
	local index=$(get_index $x $y)
	echo ${board[$index]}
}

set_content() {
	local x=$1
	local y=$2
	local new_value=$3
	local index=$(get_index $x $y)
	board[$index]=${new_value}
}

move() {
	case $1 in
		right )
			for ((y=0; y<$board_dim; ++y)); do
				local x=$board_dim_minus_two
				local merged=''
				while [ $x -ge 0 ]; do
					this_index=$(get_index $x $y)
					this_value=${board[$this_index]}
					right_index=$(get_index $((x+1)) $y)
					right_value=${board[$right_index]}
					if [[ $this_value > 0 ]] && [[ $right_value == 0 ]]; then
						board[$right_index]=$this_value
						board[$this_index]=0
						if [[ $x < $board_dim_minus_two ]]; then
							((++x))
						fi
						input_was_valid=true
					elif [[ $this_value > 0 ]] && [[ $this_value == $right_value ]] && [[ "${merged[$((x+1))]}" == '' ]]; then
						board[$right_index]=$((this_value * 2)) # use <<= if available?
						board[$this_index]=0
						local merged[$((x+1))]=1
						input_was_valid=true
					else
						((--x)) || true
					fi
				done
			done
			;;
		down )
			for ((x=0; x<$board_dim; ++x)); do
				local y=$board_dim_minus_two
				local merged=''
				while [ $y -ge 0 ]; do
					this_index=$(get_index $x $y)
					this_value=${board[$this_index]}
					down_index=$(get_index $x $((y+1)))
					down_value=${board[$down_index]}
					if [[ $this_value > 0 ]] && [[ $down_value == 0 ]]; then
						board[$down_index]=$this_value
						board[$this_index]=0
						if [[ $y < $board_dim_minus_two ]]; then
							((++y))
						fi
						input_was_valid=true
					elif [[ $this_value > 0 ]] && [[ $this_value == $down_value ]] && [[ "${merged[$((y+1))]}" == '' ]]; then
						board[$down_index]=$((this_value * 2)) # use <<= if available?
						board[$this_index]=0
						local merged[$((y+1))]=1
						input_was_valid=true
					else
						((--y)) || true
					fi
				done
			done
			;;
		left )
			for ((y=0; y<$board_dim; ++y)); do
				local x=1
				local merged=''
				while [[ $x < $board_dim ]]; do
					this_index=$(get_index $x $y)
					this_value=${board[$this_index]}
					left_index=$(get_index $((x-1)) $y)
					left_value=${board[$left_index]}
					if [[ $this_value > 0 ]] && [[ $left_value == 0 ]]; then
						board[$left_index]=$this_value
						board[$this_index]=0
						if [[ $x > 1 ]]; then
							((--x))
						fi
						input_was_valid=true
					elif [[ $this_value > 0 ]] && [[ $this_value == $left_value ]] && [[ "${merged[$((x-1))]}" == '' ]]; then
						board[$left_index]=$((this_value * 2)) # use <<= if available?
						board[$this_index]=0
						local merged[$((x-1))]=1
						input_was_valid=true
					else
						((++x))
					fi
				done
			done
			;;
		up )
			for ((x=0; x<$board_dim; ++x)); do
				local y=1
				local merged=''
				while [[ $y < $board_dim ]]; do
					this_index=$(get_index $x $y)
					this_value=${board[$this_index]}
					up_index=$(get_index $x $((y-1)))
					up_value=${board[$up_index]}
					if [[ $this_value > 0 ]] && [[ $up_value == 0 ]]; then
						board[$up_index]=$this_value
						board[$this_index]=0
						if [[ $y > 1 ]]; then
							((--y))
						fi
						input_was_valid=true
					elif [[ $this_value > 0 ]] && [[ $this_value == $up_value ]] && [[ "${merged[$((y-1))]}" == '' ]]; then
						board[$up_index]=$((this_value * 2)) # use <<= if available?
						board[$this_index]=0
						local merged[$((y-1))]=1
						input_was_valid=true
					else
						((++y))
					fi
				done
			done
			;;
	esac
}

process_input() {
	input_was_valid=false
	case $in_key in
		w ) move up ;;
		a ) move left ;;
		s ) move down ;;
		d ) move right ;;
		* ) wait_for_input; process_input ;;
	esac
}

HORIZONTAL_LINE='#################################'
PADDING_LINE='#'
for ((i=0; i<$board_dim; ++i)); do
	PADDING_LINE="${PADDING_LINE}       #"
done
render_board() {
	trace render_board ENTER
	clear

	local counter=$board_dim
	local disp="SCORE: $(printf '%7s' $score)\n\n$HORIZONTAL_LINE\n$PADDING_LINE\n"
	for ((i=0; i<$total_tiles; ++i)); do
		local cell_content=${board[$i]}
		if [[ $cell_content == 0 ]]; then
			local cell_content='     '
		else
			local cell_content=$(printf '%5s' $cell_content)
		fi
		local disp="${disp}# ${cell_content} "
		if ((--counter == 0)); then
			local disp="${disp}#\n$PADDING_LINE\n$HORIZONTAL_LINE"
			# only add trailing padding line if there is more board to render
			if ((i+1 < total_tiles)); then
				local disp="${disp}\n$PADDING_LINE\n"
				local counter=$board_dim
			fi
		fi
	done
	echo -e "${disp}"
	trace render_board EXIT
}

new_game

